#!/usr/bin/env perl
#
# jbolex - try to lex Lojbanic words, or a subset thereof. adapted from
# CCL[1] chapters 3, 4, and other sections. motivated by a #lojban
# discussion concerning {migleki} parsing into either {mi gleki}
# (camxes, and probably some humans) or {migle ki} (a different parser
# under consideration) or even failing to parse (a then current version
# of mitysisku(1), which is now less bad at cmavo). penultimate stress
# was mentioned, which {miglÃ©ki} has but {coirodo} does not
#
# the output file "jbolex.json" will likely be of interest as it
# contains the character sets and associated regular expressions
# from this code, plus additional regular expressions for more
# complicated forms
#
#   "However, a detailed algorithm for breaking sounds into words has
#   not yet been fully debugged" -- CLL 4.1 p.49
#
# [1] CLL in this file indicates "cll_v1.1_book.pdf" or in general "The
#     Complete Lojban Language" by John Woldemar Cowan, though that may
#     vary from the specific PDF file
#
# related projects:
#   https://github.com/lojban/jbofihe
#   https://github.com/La-Lojban/free-gismu-space
#
# TODO check outputs of this code against those (though the
# free-gismu-space code I somehow adapted into gismu/allgismu some
# time ago)

use strict;
use warnings;
use Cpanel::JSON::XS ();
use DBI              ();
use Getopt::Long qw(GetOptions);
use Regexp::Assemble ();
use Test2::API qw(test2_add_callback_testing_done);
use Test2::Bundle::More;
use Test2::Tools::Compare;

# see lefanva for how to set this up (or comment out all the $dbh
# related code)
my $DBFILE = "$ENV{HOME}/share/lojban/en.db";
die "no lojban database -- see lefanva\n" unless -f $DBFILE;
my $dbh = DBI->connect( "dbi:SQLite:dbname=$DBFILE", '', '',
    { AutoCommit => 1, RaiseError => 1 } );

GetOptions( 'export' => \my $Flag_Export, 'test' => \my $Flag_Test ) or exit 1;

$Flag_Test = 1 if $Flag_Export;
plan(10)       if $Flag_Test;

sub set($@);

########################################################################
#
# VARIABLES
#
#  * %Sets -- name to list reference of various characters or strings.
#    the names are either taken from CLL (V, C/CC, etc) or have been
#    made up. the names MUST NOT match any characters in the ALL set
#  * %Regex -- compiled regex of the Sets, plus some others
#  * %Restring -- as previous but in as_string form for cleaner (ha!)
#    export to JSON or subsequent use in PCRE or whatever
#
# in other words:
#
#   $Sets{"CAT"}     = [qw(m l a t u)];
#   $Regex{"CAT"}    = qr/(?^u:[almtu]/;    # (or something like that)
#   $Restring{"CAT"} = "[almtu]";

my ( %Sets, %Regex, %Restring );

########################################################################
#
# BASIC DEFINITIONS

# CLL 3.1
set ALL => "'", ",", ".", qw(a b c d e f g i j k l m n o p r s t u v x y z);
set ALLREGULAR => qw(a b c d e f g i j k l m n o p r s t u v x y z);

# CLL 4.1 - vowels (excludes .y. by definition)
set V    => qw(a e i o u);
set VALL => qw(a e i o u y);

# CLL 3.5
set V_PAIR => qw(
  a'a a'e a'i a'o a'u a'y
  e'a e'e e'i e'o e'u e'y
  i'a i'e i'i i'o i'u i'y
  o'a o'e o'i o'o o'u o'y
  u'a u'e u'i u'o u'u u'y
  y'a y'e y'i y'o y'u y'y
);

# CLL 4.1 - vowel pairs (extended by CMAVO)
set VV => qw(
  ai ei oi au
  a'a a'e a'i a'o a'u
  e'a e'e e'i e'o e'u
  i'a i'e i'i i'o i'u
  o'a o'e o'i o'o o'u
  u'a u'e u'i u'o u'u
);

# consonants minus ' which CLL 3.3 explains why is isn't h
set C => qw(b c d f g j k l m n p r s t v x z);

# do we have all the characters? + 3 is for the . ' , specials
is( @{ $Sets{C} } + @{ $Sets{VALL} } + 3,
    @{ $Sets{ALL} },
    "orthography count 1"
) if $Flag_Test;
is( @{ $Sets{C} } + @{ $Sets{VALL} },
    @{ $Sets{ALLREGULAR} },
    "orthography count 2"
) if $Flag_Test;

# CLL 3.4
set DIPHTHONG => qw(ai ei oi au ia ie ii io iu ua ue ui uo uu iy uy);

# CLL 3.6
set C_VOICED   => qw(b d g v j z);
set C_UNVOICED => qw(p t k f c s x);
set C_SYLLABIC => qw(l m n r);

# are the consonant subsets complete?
is( @{ $Sets{C_VOICED} } + @{ $Sets{C_UNVOICED} } + @{ $Sets{C_SYLLABIC} },
    @{ $Sets{C} },
    "consonant subsets"
) if $Flag_Test;

# make helper regex for the subsequent pair making
set CJSZ   => qw(c j s z);
set CX_ETC => qw(cx kx xc xk mz);

# permissible consonant pairs, which differ from the subsequent
set "C/C" => make_c_pairs();

# CLL 3.7 and CLL 4.1 - permissible initial consonant pairs
set CC => qw(
  pl pr
  fl fr
  bl br
  vl vr
  cp cf
  ct ck cm cn
  cl cr
  jb jv
  jd jg jm
  sp sf
  st sk sm sn
  sl sr
  zb zv
  zd zg zm
  tc tr
  ts
  kl kr
  dj dr dz
  gl gr
  ml mr
  xl xr
);
# CLL 3.7 p.40 claims that there are 48 of these
is( @{ $Sets{CC} }, 48, "permissible initial consonant pairs" ) if $Flag_Test;

# CLL 3.7 p.38 and CLL 4.1 p.50
#
# "consonant triples can occur medially in Lojban words" with
# restrictions:
#   1. first two must be permissible pair (C/C)
#   2. last two must be permissible initial consonant pair (CC)
#   3. qw(ndj ndz ntc nts) are verboten
# (there are complications involving names or cmene, see below)

set BAD_TRIPLE => qw(ndj ndz ntc nts);

# brute force this--minus the bad triples iterate all C/C and use each
# last character to find all CC that start with said
{
    my @ccc;
    for my $chpair ( @{ $Sets{"C/C"} } ) {
        my ( $first, $last ) = split '', $chpair;
        for my $cc ( @{ $Sets{"CC"} } ) {
            if ( $cc =~ m{^$last} ) {
                my $triple = "$first$cc";
                next if $triple =~ m{^$Regex{BAD_TRIPLE}};
                push @ccc, $triple;
            }
        }
    }
    set "C/CC" => @ccc;
}

########################################################################
#
# CMAVO - CLL 4.2

{
    # CLL 4.2 p.51
    set CMAVO_VV =>
      ( @{ $Sets{VV} }, @{ $Sets{DIPHTHONG} }, qw(ia ie ii io iu ua ue ui uo uu) );

    # CLL 4.2 p.51 and also CLL 17.2 p.398
    set CMAVO_CY => map { $_ . 'y' } @{ $Sets{C} };

    # these go under the "bu-letteral" type in the dictionary. they may
    # need to be renamed to something better
    set LETTERAL_VALL => map { $_ . 'bu' } @{ $Sets{VALL} };

    # unique, though related to Cy
    set LETTERAL_Y => "y'y";

    # KLUGE custom things in my copy of the dictionary. downside: a lot
    # of these could be added, especially if someone wants to letteral
    # up any portion of the Unicode space. another debate is whether to
    # match these as two tokens [something,bu] or to include the bu in
    # the match. since my use is aimed at a dictionary lookup, going for
    # the inclusive match to obtain a more exact dictionary entry
    # (compare {ve'o} and {ve'obu})
    #
    # TODO this probably needs to be made more generic, maybe with a
    # closer reading of CLL 17.5 and onwards?
    set LETTERAL_MISC =>
      qw(joibu ky.bu paubu saibu uibu ve'obu veibu vy.bu xy.bu y'y.bu zo'obu);

    my @cv;
    for my $c ( @{ $Sets{C} } ) {
        for my $v ( @{ $Sets{V} } ) {
            push @cv, "$c$v";
        }
    }
    set CMAVO_CV => @cv;

    my @cvv;
    for my $c ( @{ $Sets{C} } ) {
        for my $vv ( @{ $Sets{CMAVO_VV} } ) {
            push @cvv, "$c$vv";
        }
    }
    # TODO is this generic and re-used in lujvo? if so rename it CVV
    set CMAVO_CVV => @cvv;

    # NOTE KLUGE had problems with Regexp::Assemble 0.38 if add
    # CMAVO_CVV to this list so instead join that on afterwards
    my $cobj = Regexp::Assemble->new->add( map { $Restring{$_} }
          qw(VALL CMAVO_VV CMAVO_CV CMAVO_CY LETTERAL_Y LETTERAL_VALL LETTERAL_MISC) );
    my $re = $cobj->as_string;

    # TODO also need to consider experimental cmavo forms, CVVV+ VVV+
    $re = '(?:' . join( '|', $re, $Restring{CMAVO_CVV} ) . ')';

    if (1) {
        my ( $fh, @match );
        open $fh, '>', 'out' or die "argh $!";
        # NOTE there are a bunch of cmavo types (and also bu-letterals);
        # cmavo-compound are not considered as a single unit for lexing.
        # experimental cmavo are also useful to match as they use a
        # longer form
        #
        #   sqlite> select distinct type from jbo where type like '%cmavo%';
        #   cmavo
        #   cmavo-compound
        #   experimental cmavo
        #   obsolete cmavo
        #   sqlite>
        my $sth = $dbh->prepare(
            "SELECT word,type FROM jbo WHERE type = ? OR type = ? OR type = ?");
        $sth->execute( "cmavo", "experimental cmavo", "bu-letteral" );
        while ( my @row = $sth->fetchrow_array ) {
            my ( $cmavo, $type ) = @row;
            # skip {canlu bu} and such letterals
            next if $cmavo =~ m/ bu$/;
            if ( $cmavo !~ m{^$re$} ) {
                print $fh "$cmavo $type\n";
            }
        }
        #is( \@match, [], "non matching dictionary cmavo" );
    }

    # this omits experimental cmavo, notably, so is not called CMAVO
    $Restring{CMAVO_SUBSET} = $re;
}

########################################################################
#
# GISMU - CLL 4.4

{
    # does a gismu matcher built from CVC/CV or CCVCV match all gismu?
    my $cvccv = join( '', map { $Restring{$_} } qw(C V C/C V) );
    my $ccvcv = join( '', map { $Restring{$_} } qw(CC V C V) );
    my $gobj  = Regexp::Assemble->new->add( $cvccv, $ccvcv );
    my $re    = $gobj->re;

    if ($Flag_Test) {
        # all possible gismu, which is a superset of what can be in the
        # language (this assumes that the "allgismu" code correctly
        # generates all possible gismu, and that the permutation code
        # for the bads is also correct)
        if ( !-f "gismu/all" or !-f "gismu/bad" ) {
            diag("building gismu lists... (slow)");
            system(qw{make -C gismu all});
        }

        my $fh;
        my @match;

        diag("matching gismu lists... (slow)");

        # any potential gismu must match
        open $fh, '<', 'gismu/all' or die "open failed 'gismu/all': $!\n";
        while ( my $gismu = readline $fh ) {
            chomp $gismu;
            if ( $gismu !~ m{^$re$} ) {
                push @match, $gismu;
            }
        }
        is( \@match, [], "not matching allgismu" );

        # bad must not be matched
        @match = ();
        open $fh, '<', 'gismu/bad' or die "open failed 'gismu/bad': $!\n";
        while ( my $gismu = readline $fh ) {
            chomp $gismu;
            if ( $gismu =~ m{^$re$} ) {
                push @match, $gismu;
            }
        }
        is( \@match, [], "matching badgismu" );

        # there's not many of these unlike the order of magnitude
        # larger potential gismu space and even larger illegal space.
        # but not being able to match a dictionary entry would be,
        # like, really bad
        #
        #   sqlite> select count(*) from jbo where type like '%gismu%';
        #   1655
        #   sqlite> select distinct type from jbo where type like '%gismu%';
        #   experimental gismu
        #   gismu
        #   sqlite>
        @match = ();
        my $sth = $dbh->prepare("SELECT word FROM jbo WHERE type LIKE ?");
        $sth->execute('%gismu%');
        while ( my $gismu = ( $sth->fetchrow_array )[0] ) {
            if ( $gismu !~ m{^$re$} ) {
                push @match, $gismu;
            }
        }
        is( \@match, [], "non matching dictionary gismu??" );
    }

    # a Sets entry for gismu would require listing out all the potential
    # gismu, or at least the approved dictionary ones, which is a lot,
    # and that list can more readily be queried from a database. so only
    # a regex entry for matching gismu
    $Restring{GISMU} = $gobj->as_string;
}

# is CC a subset of C/C?
{
    my ( %ccall, %cslash );
    @ccall{ @{ $Sets{CC} }, @{ $Sets{"C/C"} } } = ();
    @cslash{ @{ $Sets{"C/C"} } } = ();
    is( \%ccall, \%cslash, "CC is subset of C/C" ) if $Flag_Test;
}

# TODO one might work on a lexer here

########################################################################
#
# PARTING TESTS

if ($Flag_Test) {
    my $failure_count = 0;
    test2_add_callback_testing_done( sub { $failure_count = $_[1]->failed } );

    my ( @bad_re, @empty );
    for my $key ( keys %Sets ) {
        my $set = $Sets{$key};

        # any illegal set names?
        push @bad_re, $key if $key =~ m{$Regex{ALL}};

        # any empty sets because you renamed something?
        push @empty, $key unless @$set;
    }
    is( \@bad_re, [], "illegal set name" );
    is( \@empty,  [], "empty set" );

    done_testing;
    if ( $failure_count != 0 ) {
        diag "no JSON export due to test failure(s)";
        $Flag_Export = 0;
    }
}

########################################################################
#
# EXPORT

if ($Flag_Export) {
    my $json = Cpanel::JSON::XS->new->ascii->pretty->canonical(1);
    open my $fh, '>', "jbolex.json" or die "open failed 'jbolex.json': $!\n";
    print $fh $json->encode(
        [   sets  => \%Sets,
            regex => \%Restring,
        ]
    );
}

########################################################################
#
# SUBROUTINES

# make the C/C pairs which differ from the CC pairs (a shorter static
# list copied out of CLL, above)
sub make_c_pairs {
    my @pairs;
    # pairs of consonants have restrictions:
    for my $x ( @{ $Sets{C} } ) {
        for my $y ( @{ $Sets{C} } ) {
            #   1. no doubling (ll, ss, kk, etc)
            next if $x eq $y;

            #   2. no mixing voiced and unvoiced
            next
              if $x  =~ m{$Regex{C_VOICED}}
              and $y =~ m{$Regex{C_UNVOICED}};
            next
              if $x  =~ m{$Regex{C_UNVOICED}}
              and $y =~ m{$Regex{C_VOICED}};

            #   3. both cannot be from c, j, s, z
            next if $x =~ m{^$Regex{CJSZ}} and $y =~ m{^$Regex{CJSZ}};

            my $p = "$x$y";

            #   4. cx, kx, xc, xk, mz are forbidden
            next if $p =~ m{^$Regex{CX_ETC}};

            push @pairs, $p;
        }
    }
    return @pairs;
}

sub set($@) {
    my $name = shift;
    $Sets{$name} = [@_];

    # KLUGE escape . (and other things) so that "." the Lojbanic stop
    # does not become qr/./ which matches too much for our needs
    my @list = map { quotemeta } @_;

    my $re = Regexp::Assemble->new->add(@list);
    $Regex{$name}    = $re->re;
    $Restring{$name} = $re->as_string;
}

########################################################################
#
# THIS IS THE END MY ONLY FRIEND THE

__END__
 * "periods are included only as an aid to the reader"
 * comma is a break indicator--remove, or pass along as garbage?

 * cmene -- "names can begin or end with any permissible consonant pair,
   and can have triples anywhere, provided the pairs are permissible"
   (CLL p.40). so that complicates parsing, as you would really need to
   know whether a name is expected due to a {la} or such prior. a name
   should have a trailing consonant at the end, but who knows where that
   end might be lacking the clue of " " or ". " before the next word

   .y. does that mean any CC pair anywhere is okay in a name, so a
   "(C[C)C]" and not the more specific "C/CC" triple? or by triples do
   they mean C/CC? ... I'm going to ignore names until I get other
   things to a somewhat not broken state
